//! This module tests the library's analysis capabilities on the `House`
//! contract`.
#![cfg(test)]

use storage_layout_analyzer::{
    inference::abi::{AbiType, StructElement},
    layout::StorageSlot,
    utility::U256W,
    watchdog::LazyWatchdog,
};

mod common;

/// Tests the analyser on the bytecode of the House contract deployed
/// [here](https://etherscan.io/address/0x7cbb952a448672eb6ea3cc869cdcec6cf6163e29#code).
#[test]
fn correctly_generates_a_layout() -> anyhow::Result<()> {
    // Create the analyzer
    let bytecode = "";
    let analyzer = common::new_analyzer_from_bytecode(bytecode, LazyWatchdog.in_rc())?;

    // Get the final storage layout for the input contract
    let layout = analyzer.analyze()?;

    // We should see 36 entries
    assert_eq!(layout.slots().len(), 36);

    // `address` but we infer `number160`
    assert!(
        layout
            .slots()
            .contains(&StorageSlot::new(0, 0, AbiType::Number { size: Some(160) }))
    );

    // `uint256` but we infer `number256`
    assert!(
        layout
            .slots()
            .contains(&StorageSlot::new(1, 0, AbiType::Number { size: Some(256) }))
    );

    // `address`
    assert!(layout.slots().contains(&StorageSlot::new(2, 0, AbiType::Address)));

    // `bool` but we infer `number8`
    assert!(
        layout
            .slots()
            .contains(&StorageSlot::new(3, 0, AbiType::Number { size: Some(8) }))
    );

    // `string` but we infer `bytes`
    assert!(layout.slots().contains(&StorageSlot::new(4, 0, AbiType::DynBytes)));

    // `string` but we infer `bytes`
    assert!(layout.slots().contains(&StorageSlot::new(5, 0, AbiType::DynBytes)));

    // `string` but we infer `bytes`
    assert!(layout.slots().contains(&StorageSlot::new(6, 0, AbiType::DynBytes)));

    // `address` but we infer `bytes20`
    assert!(
        layout
            .slots()
            .contains(&StorageSlot::new(7, 0, AbiType::Bytes { length: Some(20) }))
    );

    // `packed(address, bool)` but we infer `bytes20`
    assert!(
        layout
            .slots()
            .contains(&StorageSlot::new(8, 0, AbiType::Bytes { length: Some(20) }))
    );

    // `uint256`
    assert!(
        layout
            .slots()
            .contains(&StorageSlot::new(9, 0, AbiType::UInt { size: Some(256) }))
    );

    // `uint256`
    assert!(
        layout
            .slots()
            .contains(&StorageSlot::new(10, 0, AbiType::UInt { size: Some(256) }))
    );

    // `uint256` but we miss it entirely
    assert!(!layout.slots().iter().any(|slot| slot.index == U256W::from(11)));

    // `string` but we infer `bytes`
    assert!(layout.slots().contains(&StorageSlot::new(12, 0, AbiType::DynBytes)));

    // `mapping(uint256 => struct)` but we infer `mapping(uint256 => uint256)`
    assert!(layout.slots().contains(&StorageSlot::new(
        13,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Number { size: Some(256) }),
            value_type: Box::new(AbiType::Number { size: Some(256) }),
        }
    )));

    // `uint256` but we infer `numberUnknown`
    assert!(
        layout
            .slots()
            .contains(&StorageSlot::new(14, 0, AbiType::Number { size: None }))
    );

    // `uint256` but we infer `numberUnknown`
    assert!(
        layout
            .slots()
            .contains(&StorageSlot::new(15, 0, AbiType::Number { size: None }))
    );

    // `mapping(uint256 => uint256)` but we infer `mapping(number256 => uint256)`
    assert!(layout.slots().contains(&StorageSlot::new(
        16,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Number { size: Some(256) }),
            value_type: Box::new(AbiType::UInt { size: Some(256) }),
        }
    )));

    // `mapping(uint256 => uint256)` but we infer `mapping(number256 =>
    // numberUnknown)`
    assert!(layout.slots().contains(&StorageSlot::new(
        17,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Number { size: Some(256) }),
            value_type: Box::new(AbiType::Number { size: None }),
        }
    )));

    // `mapping(uint256 => uint256)` but we infer `mapping(number256 =>
    // uintUnknown)`
    assert!(layout.slots().contains(&StorageSlot::new(
        18,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Number { size: Some(256) }),
            value_type: Box::new(AbiType::UInt { size: None }),
        }
    )));

    // `mapping(uint256 => mapping(uint256 => uint256))` but we infer
    // `mapping(number256 => mapping(bytes32 => uint256))`
    assert!(layout.slots().contains(&StorageSlot::new(
        19,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Number { size: Some(256) }),
            value_type: Box::new(AbiType::Mapping {
                key_type:   Box::new(AbiType::Bytes { length: Some(32) }),
                value_type: Box::new(AbiType::UInt { size: Some(256) }),
            }),
        }
    )));

    // `mapping(address => mapping(uint256 => uint256))` but we infer
    // `mapping(address => mapping(number256 => uint256))`
    assert!(layout.slots().contains(&StorageSlot::new(
        20,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Address),
            value_type: Box::new(AbiType::Mapping {
                key_type:   Box::new(AbiType::Number { size: Some(256) }),
                value_type: Box::new(AbiType::UInt { size: Some(256) }),
            }),
        }
    )));

    // `mapping(address => mapping(uint256 => uint256))` but we infer
    // `mapping(address => mapping(number256 => uintUnknown))`
    assert!(layout.slots().contains(&StorageSlot::new(
        21,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Address),
            value_type: Box::new(AbiType::Mapping {
                key_type:   Box::new(AbiType::Number { size: Some(256) }),
                value_type: Box::new(AbiType::UInt { size: None }),
            }),
        }
    )));

    // `mapping(address => mapping(uint256 => mapping(uint256 => uint256)))` but we
    // infer `mapping(address => mapping(number256 => mapping(bytes32 => uint256))`
    assert!(layout.slots().contains(&StorageSlot::new(
        22,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Address),
            value_type: Box::new(AbiType::Mapping {
                key_type:   Box::new(AbiType::Number { size: Some(256) }),
                value_type: Box::new(AbiType::Mapping {
                    key_type:   Box::new(AbiType::Bytes { length: Some(32) }),
                    value_type: Box::new(AbiType::UInt { size: Some(256) }),
                }),
            }),
        }
    )));

    // `mapping(address => mapping(uint256 => uint256))` but we infer
    // `mapping(address => mapping(number256 => uint256))`
    assert!(layout.slots().contains(&StorageSlot::new(
        23,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Address),
            value_type: Box::new(AbiType::Mapping {
                key_type:   Box::new(AbiType::Number { size: Some(256) }),
                value_type: Box::new(AbiType::UInt { size: Some(256) }),
            }),
        }
    )));

    // `mapping(address => mapping(uint256 => uint256))` but we infer
    // `mapping(address => mapping(number256 => struct))`
    assert!(layout.slots().contains(&StorageSlot::new(
        24,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Address),
            value_type: Box::new(AbiType::Mapping {
                key_type:   Box::new(AbiType::Number { size: Some(256) }),
                value_type: Box::new(AbiType::Struct {
                    elements: vec![
                        StructElement::new(0, AbiType::Number { size: Some(8) }),
                        StructElement::new(8, AbiType::Bytes { length: Some(31) })
                    ],
                }),
            }),
        }
    )));

    // `mapping(address => mapping(uint256 => bool))` but we infer
    // `mapping(address => mapping(number256 => struct))`
    assert!(layout.slots().contains(&StorageSlot::new(
        25,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Address),
            value_type: Box::new(AbiType::Mapping {
                key_type:   Box::new(AbiType::Number { size: Some(256) }),
                value_type: Box::new(AbiType::Struct {
                    elements: vec![
                        StructElement::new(0, AbiType::Number { size: Some(8) }),
                        StructElement::new(8, AbiType::Bytes { length: Some(31) })
                    ],
                }),
            }),
        }
    )));

    // `mapping(address => uint256)` but we infer `mapping(address => uintUnknown)`
    assert!(layout.slots().contains(&StorageSlot::new(
        26,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Address),
            value_type: Box::new(AbiType::UInt { size: None }),
        }
    )));

    // `mapping(address => uint256)` but we infer `mapping(address =>
    // numberUnknown)`
    assert!(layout.slots().contains(&StorageSlot::new(
        27,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Address),
            value_type: Box::new(AbiType::Number { size: None }),
        }
    )));

    // `mapping(address => uint256)` but we infer `mapping(address => uintUnknown)`
    assert!(layout.slots().contains(&StorageSlot::new(
        28,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Address),
            value_type: Box::new(AbiType::UInt { size: None }),
        }
    )));

    // `mapping(address => uint256)` but we infer `mapping(bytes20 => any)`
    assert!(layout.slots().contains(&StorageSlot::new(
        29,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Bytes { length: Some(20) }),
            value_type: Box::new(AbiType::Any),
        }
    )));

    // `address[]` but we infer `bytes20[]`
    assert!(layout.slots().contains(&StorageSlot::new(
        30,
        0,
        AbiType::DynArray {
            tp: Box::new(AbiType::Bytes { length: Some(20) }),
        }
    )));

    // `mapping(uint256 => bool)` but we infer `mapping(number256 => struct)`
    assert!(layout.slots().contains(&StorageSlot::new(
        31,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Number { size: Some(256) }),
            value_type: Box::new(AbiType::Struct {
                elements: vec![
                    StructElement::new(0, AbiType::Number { size: Some(8) }),
                    StructElement::new(8, AbiType::Bytes { length: Some(31) })
                ],
            }),
        }
    )));

    // `mapping(uint256 => uint256)` but we infer `mapping(number256 =>
    // uintUnknown)`
    assert!(layout.slots().contains(&StorageSlot::new(
        32,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Number { size: Some(256) }),
            value_type: Box::new(AbiType::UInt { size: None }),
        }
    )));

    // `mapping(uint256 => uint256)` but we infer `mapping(number256 =>
    // uintUnknown)`
    assert!(layout.slots().contains(&StorageSlot::new(
        33,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Number { size: Some(256) }),
            value_type: Box::new(AbiType::UInt { size: None }),
        }
    )));

    // `uint256` but we infer `numberUnknown`
    assert!(
        layout
            .slots()
            .contains(&StorageSlot::new(34, 0, AbiType::Number { size: None },))
    );

    // `mapping(address => uint256)` but we infer `mapping(address =>
    // numberUnknown)`
    assert!(layout.slots().contains(&StorageSlot::new(
        35,
        0,
        AbiType::Mapping {
            key_type:   Box::new(AbiType::Address),
            value_type: Box::new(AbiType::Number { size: None }),
        }
    )));

    Ok(())
}
